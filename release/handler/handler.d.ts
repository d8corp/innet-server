import { context, type ContextProps, slot, type SlotProps, slots, type SlotsProps } from '@innet/jsx';
import { arraySync, async } from '@innet/utils';
import { type ApiProps, type ArrayProps, type BinaryProps, blacklist, type BlacklistProps, type BodyProps, type BooleanProps, cms, type CmsProps, type ContactProps, type CookieProps, type DateProps, type DevProps, type DtsProps, type EndpointProps, type ErrorProps, type FallbackProps, type FieldProps, file, type FileProps, type HeaderProps, type HostProps, type IntegerProps, type LicenseProps, type NullProps, type NumberProps, type ObjectProps, type ParamProps, type ProdProps, protection, type ProtectionProps, type ProxyProps, type RedirectProps, type RequestProps, type ResponseProps, type ServerProps, type StringProps, type SuccessProps, type SwaggerProps, type TagProps, type TupleProps, type UuidProps, type VariableProps, whitelist, type WhitelistProps } from '../plugins';
export declare const arrayPlugins: (typeof arraySync)[];
export declare const JSXPlugins: {
    api: import("innet").HandlerPlugin;
    array: import("innet").HandlerPlugin;
    binary: import("innet").HandlerPlugin;
    blacklist: typeof blacklist;
    body: import("innet").HandlerPlugin;
    boolean: import("innet").HandlerPlugin;
    cms: typeof cms;
    contact: import("innet").HandlerPlugin;
    context: typeof context;
    cookie: import("innet").HandlerPlugin;
    date: import("innet").HandlerPlugin;
    dev: import("innet").HandlerPlugin;
    dts: import("innet").HandlerPlugin;
    endpoint: import("innet").HandlerPlugin;
    error: import("innet").HandlerPlugin;
    fallback: import("innet").HandlerPlugin;
    field: import("innet").HandlerPlugin;
    file: typeof file;
    header: import("innet").HandlerPlugin;
    host: import("innet").HandlerPlugin;
    integer: import("innet").HandlerPlugin;
    license: import("innet").HandlerPlugin;
    null: import("innet").HandlerPlugin;
    number: import("innet").HandlerPlugin;
    object: import("innet").HandlerPlugin;
    param: import("innet").HandlerPlugin;
    prod: import("innet").HandlerPlugin;
    protection: typeof protection;
    proxy: import("innet").HandlerPlugin;
    redirect: import("innet").HandlerPlugin;
    request: import("innet").HandlerPlugin;
    response: import("innet").HandlerPlugin;
    slot: typeof slot;
    slots: typeof slots;
    server: import("innet").HandlerPlugin;
    swagger: import("innet").HandlerPlugin;
    string: import("innet").HandlerPlugin;
    success: import("innet").HandlerPlugin;
    tag: import("innet").HandlerPlugin;
    tuple: import("innet").HandlerPlugin;
    uuid: import("innet").HandlerPlugin;
    variable: import("innet").HandlerPlugin;
    whitelist: typeof whitelist;
};
export declare const fnPlugins: import("innet").Plugin[];
export declare const objectPlugins: import("innet").Plugin[];
export declare const promisePlugins: (typeof async)[];
export declare const handler: import("innet").Handler;
declare global {
    namespace JSX {
        interface IntrinsicElements {
            api: ApiProps;
            array: ArrayProps;
            binary: BinaryProps;
            blacklist: BlacklistProps;
            body: BodyProps;
            boolean: BooleanProps;
            cms: CmsProps;
            contact: ContactProps;
            context: ContextProps;
            cookie: CookieProps;
            date: DateProps;
            dev: DevProps;
            dts: DtsProps;
            endpoint: EndpointProps;
            error: ErrorProps;
            fallback: FallbackProps;
            field: FieldProps;
            file: FileProps;
            header: HeaderProps;
            host: HostProps;
            integer: IntegerProps;
            license: LicenseProps;
            null: NullProps;
            number: NumberProps;
            object: ObjectProps;
            param: ParamProps;
            prod: ProdProps;
            protection: ProtectionProps;
            proxy: ProxyProps;
            redirect: RedirectProps;
            request: RequestProps;
            response: ResponseProps;
            slot: SlotProps;
            slots: SlotsProps;
            server: ServerProps;
            swagger: SwaggerProps;
            string: StringProps;
            success: SuccessProps;
            tag: TagProps;
            tuple: TupleProps;
            uuid: UuidProps;
            variable: VariableProps;
            whitelist: WhitelistProps;
        }
    }
}
